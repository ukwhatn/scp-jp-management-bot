services:
  app:
    container_name: scp-jp-management-bot-app
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    volumes:
      - ./app:/app
    env_file:
      - ./envs/db.env
      - ./envs/discord.env
    environment:
      - ENV_MODE=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "[ -f /tmp/bot_status.txt ] && grep -q 'ready' /tmp/bot_status.txt && [ $(date +%s) -lt $(($(cut -d':' -f2 /tmp/bot_status.txt) + 60)) ] || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
#      redis:
#        condition: service_healthy
      db-migrator:
        condition: service_completed_successfully
    networks:
      - db
#      - redis

  db:
    container_name: scp-jp-management-bot-db
    image: postgres:17
    env_file:
      - ./envs/db.env
    environment:
      POSTGRES_DB: main
      TZ: Azia/Tokyo
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U user -d main
      interval: 2s
      timeout: 5s
      retries: 30
    networks:
      - db

#  redis:
#    container_name: scp-jp-management-bot-redis
#    image: redis:7.4.1
#    volumes:
#      - redis_data:/data
#    restart: unless-stopped
#    healthcheck:
#      test: redis-cli ping
#      interval: 2s
#      timeout: 5s
#      retries: 30
#    networks:
#      - redis

  db-migrator:
    container_name: scp-jp-management-bot-db-migrator
    image: ghcr.io/ukwhatn/psql-migrator:latest
    volumes:
      - ./versions:/app/versions
    env_file:
      - ./envs/db.env
    environment:
      - POSTGRES_HOST=db
    restart: no
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db

  db-dumper:
    container_name: scp-jp-management-bot-db-dumper
    image: ghcr.io/ukwhatn/psql-dumper:latest
    env_file:
      - ./envs/db.env
      - ./envs/sentry.env
      - ./envs/aws-s3.env
    environment:
      - POSTGRES_HOST=db
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db

volumes:
  pg_data:
#  redis_data:

networks:
  db:
    driver: bridge
#  redis:
#    driver: bridge